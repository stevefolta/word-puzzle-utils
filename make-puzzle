#!/usr/bin/env python3

import sys, random

output_file_path = "puzzle"
target_word_length = 7
minimum_word_length = 4
frequency_field = 1

def report(message):
	sys.stderr.write(f"\x1B[G\x1B[K{message}")
	sys.stderr.flush()

dictionary_path = ''
args = sys.argv[1:]
while len(args) > 0:
	arg = args.pop(0)
	if arg == "letters:":
		target_word_length = int(args.pop(0))
	elif arg == "frequency-field:":
		frequency_field = int(args.pop(0));
	else:
		dictionary_path = arg
if len(dictionary_path) == 0:
	print(f"Usage: {sys.argv[0]} [letters: <num-letters>] [frequency-field: <field-number>] <dictionary-file>")
	sys.exit(1)


# We're going to linearly scan the dictionary file three times.  Once just to
# find out how many words (lines) it has, once to select a random word, and
# once to find all the words that match it.

# How many words?  And total frequency?
num_lines = 0
total_frequency = 0.0
with open(dictionary_path, "r") as dict_file:
	for line in dict_file:
		num_lines += 1
		fields = line.split()
		if len(fields) > frequency_field:
			total_frequency += float(fields[frequency_field])

# Pick a word.
pangram = ''
pangram_frequency = 0.0
while len(pangram) == 0:
	start_line = random.randint(0, num_lines - 1)
	cur_line = 0
	with open(dictionary_path, "r") as dict_file:
		for line in dict_file:
			if cur_line < start_line:
				cur_line += 1
				continue

			fields = line.split()
			word = fields[0].lower()
			if len(word) == target_word_length:
				pangram_frequency = 0.0
				if total_frequency > 0.0:
					pangram_frequency = float(fields[frequency_field]) / total_frequency
				pangram = word
				break

# Pick a letter.
key_letter = pangram[random.randint(0, len(pangram) - 1)]

# Output the puzzle.
def pangram_contains(word):
	if key_letter not in word:
		return False
	letters_left = pangram
	for letter in word:
		index = letters_left.find(letter)
		if index < 0:
			return False
		letters_left = letters_left[0:index] + letters_left[index + 1:]
	return True
num_words = 0
with open(output_file_path, "w") as out_file:
	out_file.write(f"{pangram} {key_letter}\n")
	with open(dictionary_path, "r") as dict_file:
		for line in dict_file:
			fields = line.split()
			word = fields[0].lower()
			if len(word) < minimum_word_length:
				continue
			if not pangram_contains(word):
				continue
			if len(fields) > frequency_field:
				out_file.write(f"{word} {fields[frequency_field]}\n")
			else:
				out_file.write(f"{word}\n")
			num_words += 1
			report(f"Found {num_words} words from {num_lines} total words...")

sys.stderr.write('\n')
sys.stderr.flush()

if pangram_frequency > 0.0:
	print(f"Chosen word has frequency {pangram_frequency}.")

