#!/usr/bin/env python3

import sys

class WordList:
	def __init__(self, path, frequency_field = 1):
		self.path = path
		self.frequency_field = frequency_field
		self.words = {} 	# word => frequency
		self.total_frequency = 0.0
		self.has_freqencies = True
		self.read()

	def read(self):
		print(f"Reading {self.path}...", end = '', flush = True)
		with open(self.path, "r") as dict_file:
			for line in dict_file:
				fields = line.split()
				if len(fields) == 0 or fields[0].startswith('#'):
					continue
				frequency = 0.0
				if len(fields) > self.frequency_field:
					frequency = float(fields[self.frequency_field])
				else:
					self.has_frequencies = False
				word = fields[0].lower()
				self.words[word] = frequency
				self.total_frequency += frequency
		print(f" {len(self.words)} words, total frequency: {self.total_frequency}", flush = True)

	def normalize(self):
		# Recalculate the total_frequency, in case words were added or removed.
		self.total_frequency = 0.0
		for word in self.words:
			self.total_frequency += self.words[word]
		# Normalize.
		for word in self.words:
			self.words[word] /= self.total_frequency
		self.total_frequency = 1.0

	def incorporate(self, other):
		# Assumes both are already normalized.
		for word in other.words:
			if word in self.words:
				# Average the frequencies.
				self.words[word] = (self.words[word] + other.words[word]) / 2.0
			else:
				self.words[word] = other.words[word]
		self.normalize()

	def omit(self, other):
		for word in other.words:
			del self.words[word]

	def only(self, other):
		# Make a copy of the words, to make sure we don't miss any while
		# iterating and deleting.
		all_words = [ word for word in self.words ]
		for word in all_words:
			if word not in other.words:
				del self.words[word]

	def write(self, out_path):
		with open(out_path, "w") as out_file:
			for word in self.words:
				print(f'{word} {self.words[word]}', file = out_file)

	def num_words(self):
		return len(self.words)


lists = []
onlies = []
omits = []
to_path = ''

args = sys.argv[1:]
while len(args) > 0:
	arg = args.pop(0)
	if arg == "only:":
		onlies.append(WordList(*args.pop(0).split(':')))
	elif arg == "omit:":
		omits.append(WordList(*args.pop(0).split(':')))
	elif arg == "to:":
		to_path = args.pop(0)
	else:
		lists.append(WordList(*arg.split(':')))

if len(lists) == 0 or len(to_path) == 0:
	print(f'Usage: {sys.argv[0]} <word_list>... [only: <word_list>]... [omit: <word_list>]... to: output_file')
	print(f'  word_lists are paths to word list files, optionally with ":<frequency_field>" at the end.')
	sys.exit(1)

for word_list in lists:
	if not word_list.has_freqencies:
		print(f"{word_list.path} doesn't include word frequencies.")
		sys.exit(1)

# Merge the lists.
master_list = lists[0]
master_list.normalize()
for word_list in lists[1:]:
	word_list.normalize()
	master_list.incorporate(word_list)
print(f"{master_list.num_words()} words after merging.")

# Onlies and omits.
for word_list in onlies:
	master_list.only(word_list)
print(f"{master_list.num_words()} words after filtering for allowed words.")
for word_list in omits:
	master_list.omit(word_list)
print(f"{master_list.num_words()} words after filtering out forbidden words.")
master_list.normalize()

master_list.write(to_path)


